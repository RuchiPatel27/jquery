1. Introduction	I am Ruchi Patel. 	I have completed MSC ICT from VNSGU (in July 2018).  	Talking about my Technical Knowledge,I am Well Known with .Net Core, .Net MVC, jquery, javascript,Bootstrap.	My Total Experience of 3 Years in Asp.Net at Vision Infotech,1 Year Experience in .Net MVC and 2 Years Experience in .Net Core with Jquery,javascript,Bootstrap.	My Currently Role as a Web Developer and Responsibility is Developing and Testing.
2. CORS	• Cross origin resource sharing	• Due to browser security it is not allowed to access code from different domains.	• (can be different domain, different subdomain, schema- http, https or different port)	• To solve this W3 Standard was introduced which allows a server to make cross domain calls.
3. API controller vs Controller 	* API Controller:		Web API is used for generating the HTTP services that replies only as data.		Web API the request performs tracing with the actions depending on the HTTP services.		Web API returns the data in various formats, such as JSON, XML and other format based on the accept header of the request.		Web API supports content negotiation, self hosting.		Web API includes the various features of the MVC, such as routing, model binding but these features are different and are defined in the "System.Web.Http" assembly.		Web API helps the creation of RESTful services over the .Net Framework.	* Controller		MVC for developing  the Web application that replies as both data and views		MVC request performs tracing with the action name.		MVC returns the data in the JSON format by using JSONResult.		content negotiation, self hosting are not supported by the MVC.		MVC features are defined in the " System.Web.Mvc" assembly.		MVC does not support RESTful services.
4. What problem does dependency injection solves?	•	DI is a technique to achieve Inversion of control between classes and their dependencies.	•	Startup class-			services.AddSingleton<IRepository,Repository>();	•	If we create a new instance of the service directly into the controller, it tightly couples the controller with the service (Repository) used.	•	Later if the implementation of the interface changes, we need to instantiate the new service into the controller in place of the old services. 		This seems easy when it is used only at a single place. But in a typical real world application, the service may have multiple implementations and in such a case all the implementations will require change.	        This is not only tedious but also error prone. 	•	That is where DI is useful.
	Use Interfaces or base class to abstract the dependency implementation.	Dependencies are registered in the Service Container provided by ASP.NET Core inside Startup class 'ConfigureServices' method.	Dependencies are injected using constructor injection and the instance is created by DI and destroyed when no longer needed.5. Use of HTTP response message
	A HttpResponseMessage allows us to work with the HTTP protocol (for example, with the headers property) and unifies our return type. 	An HttpResponseMessage is a way of returning a message/data from your action.	Web API controller always returns an object of HttpResponseMessage to the hosting infrastructure.6. Difference between .NET Core & .NET Classic	* .Net Core		 .Net Core is an open source.		  It is compatible with various operating systems — Windows, Linux, and Mac OS as it is cross-platform.		 .Net Core does not support desktop application development and it rather focuses on the web, windows mobile, and windows store.		 .Net Core supports the development and implementation of micro-services and the user has to create a REST API for its implementation.		 .NET Core offers high performance and scalability.		 .NET Core is compatible with various operating systems — Windows, Linux, and Mac OS.		 .NET Core is compatible with open-source mobile application platforms		 .Net Core is shipped as a collection of Nugget packages.		 .NET Core has a good and flexible deployment model.		 .NET Core provides light-weight editors and command-line tools for all supported platforms.	* .Net Classic		 Certain components of the .Net Framework are open source.		.NET Framework is compatible with the windows operating system. Although, it was developed to support software and applications on all operating systems.		.Net Framework is used for the development of both desktop and web applications as well as it supports windows forms and WPF applications.		.Net Framework does not support the development and implementation of microservices but it supports the REST API services.		.Net Framework is less effective in comparison to .Net Core in terms of performance and scalability of applications.		.NET Framework is compatible only with the Windows operating system.		.NET Framework does not support any framework for mobile application development.		All the libraries of .Net Framework are packaged and shipped together.		.Net Framework is heavy for Command Line Interface and developers prefer to work on the lightweight Command Line Interface.
7. Advantage of .NET Core
	.NET Core is Cross-Platform	.NET Core is Open Source	Mature Framework and Widely Used Programming Languages	The .NET Core Supports a Wide Range of Application Types	Increased Security with .NET Core	.NET Core Enables Top App Performance	.NET Core Enables Flexibility	.NET Core is Cost Effective	.NET Core has a Large Community	.NET Core was Created by Microsoft	Fast - It is a lightweight, high-performance web framework.	Integration of Modern UI Framework - ASP.NET Core support modern, a Client-side framework like AngularJs, ReactJs and React with Redux etc. ASP.NET framework supports client-side framework templates like AngularJs, ReactJs and React with Redux etc.	Hosting - It has the ability to host on IIS, Apache, Docker or Self Hosting.	Cross Platform - ASP.NET Core web application can run on Windows, Mac, Linux development tools.	Support Built-In Dependency Injection - It supports built-in Dependency Injection.	Supports Modular - It support modular HTTP request.	Open-Source - It is an open-source and community-focused web framework.	Side-by-side app versioning - ASP.NET Core runs on .NET Core which supports the simultaneous running of multiple versions of applications.	A unified story for building web UI and web APIs.8. Start-up class role	Startup class includes two public methods: ConfigureServices and Configure.	* ConfigureServices()			This method is used to configure services that are used by the application. When the application is requested for the first time, it calls ConfigureServices method. 			This method must be declared with a public access modifier.			ASP.net core has built-in support for Dependency Injection. 	* Configure()			This method is used to define how the application will respond on each HTTP request.			This method is also used to configure middleware in HTTP pipeline.	  		This method accept IApplicationBuilder as a parameter.			This method may accept some optional parameter such as IHostingEnvironment and ILoggerFactory.			ConfigureServices method calls before Configure method.	9. Generic host & web host	The host setup the server, request pipeline and responsible for app startup and lifetime management. There are two hosts:		1. .NET Generic Host		2. ASP.NET Core Web Host	.NET Generic Host is recommended and ASP.NET Core template builds a .NET Generic Host on app startup.	Web host can be used only for HTTP (eg tied for web application) only 	generic host can be used for Console application
10. Configuration in ASP.NET Core	Configuration providers read configuration data from key-value pairs.	The key-value pairs may be grouped into a multi-level hierarchy. 	The application configuration data may come from File, such as JSON, XML, 	Environment variables 	Command Line arguments	An in-memory collection	Custom providers
11. Data binding in AngularJS	Data binding is a very useful and powerful feature used in software development technologies. It acts as a bridge between the view and business logic of the application.	AngularJS follows Two-Way data binding model.	Data binding lets you treat the model as the single-source-of-truth in your application. The view is a projection of the model at all times. If the model is changed, the view reflects the change and vice versa.	12. Application life cycle in .NET Core	https://www.c-sharpcorner.com/article/asp-net-core-mvc-request-life-cycle/	1.WebHostBuilder	2.UseKestrel()	3.UseContentRoot()                                                                   	4.UseIISIntegration()	5.UseStartup<startup>()	6.Run()	7.ConfigureServices()	8.Configure()	9.Middleware	10.Routing Middleware	11.MVC Route Handler	12.Controller Factory	13.Controller Action Invoker	14.Action Filter	15.Action Result13. Difference between Thread & Task	* Thread		The Thread class is used for creating and manipulating a thread in Windows.		Thread does not support cancellation through the use of cancellation tokens.		Threads can only have one task running at a time.		A new Thread()is not dealing with Thread pool thread.	* Task		A Task represents some asynchronous operation and is part of the Task Parallel Library, a set of APIs for running tasks asynchronously and in parallel.		Task supports cancellation through the use of cancellation tokens.		A task can have multiple processes happening at the same time.		Task does use thread pool thread.		A Task is a higher level concept than Thread.
14. Refresh token
	Refresh tokens are credentials that can be used to acquire new access tokens. 	When access tokens expire, we can use refresh tokens to get a new access token from the authentication component.15. Caching
	Caching is a technique of storing frequently used data/information in memory, 	so that, when the same data/information is needed next time, 	it could be directly retrieved from the memory instead of being generated by the application.	Types of Catching		1.Page Caching		2.Fragment caching		3.Data Caching---------------------------------
1. Introduction
2. .NET Core Experience	3 years
3. ASP.Net Web API routing	Routing is functionality that map incoming request to the route handler. 	The route can have values (extract them from URL) that used to process the request. 	Using the route, routing can find route handler based on URL. All the routes are registered when the application is started. There are two types of routing supported by ASP.NET Core		1.The conventional routing		2.Attribute routing			USing the [Route]attribute to define routes is called Attribute Routing			Attribute Routing is enable by default(WebApiConfig)			config.MapHttpAttributeRoutes		The Controller can action method without[Route]Attribute use Convention-based routing.	* How work Routing?		When web api receives an Http request by controller, it goes to routing table to find the matching route.		Once route matches as per Http request, then this route mapped to an specific action in a controller,		which is responsible to execute in order to create response to client for requested resource URL.	It routes an incoming HTTP request to a particular action method on a Web API controller.	Web API supports two types of routing:		1.Convention-based Routing			In the convention-based routing, Web API uses route templates to determine which controller and action method to execute. 			At least one route template must be added into route table in order to handle various HTTP requests.		2.Attribute Routing			attribute routing uses [Route()] attribute to define routes. 			The Route attribute can be applied on any controller or action method.			It must be enabled in WebApiConfig by calling config.MapHttpAttributeRoutes() method.4. CORS in Web API
5. Diff. API controller & controller
6. Use of HTTP response messages
7. Diff. .NET Core & .NET framework
8. Role of start-up class
9. What problem does dependency injection solves?
10. Generic host & web host
11. Configuration in ASP.Net core
12. Just in time compiler	Just-In-Time compiler(JIT) is a part of Common Language Runtime (CLR) in .NET 	A language-specific compiler converts the source code to the intermediate language. 	This intermediate language is then converted into the machine code by the Just-In-Time (JIT) compiler. 	This machine code is specific to the computer environment that the JIT compiler runs on. 
13. Garbage collector	The garbage collector (GC) manages the allocation and release of memory. 	The garbage collector serves as an automatic memory manager.	It also provides memory safety by making sure that an object cannot use the content of another object.	When we have a class that represents an object in the runtime that allocates a memory space in the heap memory.	Garbage Collector is the Component responsible for automatic memory management inside the CLR.	Developer does not manage memory.	provide more Safety in terms of making sure object cannot use content of another	Finds out and cleans unused memory automatically.14. Caching
15. Data binding in AngularJS
16. How AngularJS routes work?	 Routing in AngularJS is used when the user wants to navigate to different pages in an application but still wants it to be a single page application. 	 AngularJS routes enable the user to create different URLs for different content in an application.	 The ngRoute module helps in accessing different pages of an application without reloading the entire application.
17. Common Angular global API function	1.angular.copy()	2.angular.lowercase()	3.angular.uppercase()	4.angular.Date()	5.angular.toJson()	6.angular.equals()
18. Route scope in Angular
19. Lifecycle of ASP.Net	The ASP.NET life cycle could be divided into two groups:		1.Application Life Cycle			User makes a request for accessing application resource, a page. Browser sends this request to the web server.			An object of the class ApplicationManager is created			An object of the class HostingEnvironment is created to provide information regarding the resources.			Top level items in the application are compiled.			Response objects are created. The application objects such as HttpContext, HttpRequest and HttpResponse are created and initialized.		2.Page Life Cycle			When a page is requested, it is loaded into the server memory, processed, and sent to the browser. 			Then it is unloaded from the memory. At each of these steps, methods and events are available, which could be overridden according to the need of the application. 			The Page class creates a hierarchical tree of all the controls on the page.			All the components on the page, except the directives, are part of this control tree. 			You can see the control tree by adding trace= "true" to the page directive. 			We will cover page directives and tracing under 'directives' and 'event handling'.
20. Threads & Tasks
21. LOCK & its mechanism	A lock variable provides the simplest synchronization mechanism for processes.	Its a software mechanism implemented in user mode.	Its a busy waiting solution.	It can be used for more than two processes.22. Monitor & its mechanism
	A monitor is an electronic output device that is also known as a video display terminal (VDT) or a video display unit (VDU). 	It is used to display images, text, video, and graphics information generated by a connected computer via a computer's video card. 	Although it is almost like a TV, its resolution is much higher than a TV.	The purpose of a monitoring mechanism is to further the effective implementation of the Rules.23. Refresh token